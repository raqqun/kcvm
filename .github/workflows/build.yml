name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  go-version: 1.15
  short-sha-length: 8
  release-tag: v0.2.2-beta1

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - uses: benjlevesque/short-sha@v1.2
      id: short_sha
      with:
        length: 8

    - name: Run Tests
      run: go test ./test/kcvm/ -v

    - name: Build
      run: go build -ldflags "-X main.commitSHA=${{ steps.short_sha.outputs.sha }} -X main.version=${{ env.release-tag }}" ./cmd/kcvm/

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1.1.4
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ env.release-tag }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release ${{ env.release-tag }}
        prerelease: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./kcvm
        asset_name: kcvm-${{ env.release-tag }}-linux-amd64
        asset_content_type: application/vnd.github.v3+json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
